import { BlockingFunction, CloudFunction, EventContext } from '../cloud-functions';
import { AuthEventContext, AuthUserRecord, BeforeCreateResponse, BeforeSignInResponse, HttpsError, UserInfo, UserRecord, userRecordConstructor, UserRecordMetadata } from '../common/providers/identity';
import { DeploymentOptions } from '../function-configuration';
export { UserRecord, UserInfo, UserRecordMetadata, userRecordConstructor };
export { HttpsError };
/** @hidden */
export declare const provider = "google.firebase.auth";
/** @hidden */
export declare const service = "firebaseauth.googleapis.com";
/** Resource level options */
export interface UserOptions {
    blockingOptions?: {
        idToken?: boolean;
        accessToken?: boolean;
        refreshToken?: boolean;
    };
}
/**
 * Handle events related to Firebase authentication users.
 */
export declare function user(userOptions?: UserOptions): UserBuilder;
/** @hidden */
export declare function _userWithOptions(options: DeploymentOptions, userOptions: UserOptions): UserBuilder;
/** Builder used to create Cloud Functions for Firebase Auth user lifecycle events. */
export declare class UserBuilder {
    private triggerResource;
    private options;
    private userOptions?;
    private static dataConstructor;
    /** @hidden */
    constructor(triggerResource: () => string, options: DeploymentOptions, userOptions?: UserOptions);
    /** Respond to the creation of a Firebase Auth user. */
    onCreate(handler: (user: UserRecord, context: EventContext) => PromiseLike<any> | any): CloudFunction<UserRecord>;
    /** Respond to the deletion of a Firebase Auth user. */
    onDelete(handler: (user: UserRecord, context: EventContext) => PromiseLike<any> | any): CloudFunction<UserRecord>;
    beforeCreate(handler: (user: AuthUserRecord, context: AuthEventContext) => BeforeCreateResponse | void | Promise<BeforeCreateResponse> | Promise<void>): BlockingFunction;
    beforeSignIn(handler: (user: AuthUserRecord, context: AuthEventContext) => BeforeSignInResponse | void | Promise<BeforeSignInResponse> | Promise<void>): BlockingFunction;
    private onOperation;
    private beforeOperation;
}
