import { BlockingFunction } from '../../cloud-functions';
import { AuthBlockingEvent, BeforeCreateResponse, BeforeSignInResponse, HttpsError } from '../../common/providers/identity';
import * as options from '../options';
export { HttpsError };
/**
 * All function options plus idToken, accessToken, and refreshToken.
 */
export interface BlockingOptions extends options.GlobalOptions {
    idToken?: boolean;
    accessToken?: boolean;
    refreshToken?: boolean;
}
/**
 * Handle an event that is triggered before a user is created.
 */
export declare function beforeUserCreated(handler: (event: AuthBlockingEvent) => BeforeCreateResponse | Promise<BeforeCreateResponse> | void | Promise<void>): BlockingFunction;
export declare function beforeUserCreated(opts: BlockingOptions, handler: (event: AuthBlockingEvent) => BeforeCreateResponse | Promise<BeforeCreateResponse> | void | Promise<void>): BlockingFunction;
/**
 * Handle an event that is triggered before a user is signed in.
 */
export declare function beforeUserSignedIn(handler: (event: AuthBlockingEvent) => BeforeSignInResponse | Promise<BeforeSignInResponse> | void | Promise<void>): BlockingFunction;
export declare function beforeUserSignedIn(opts: BlockingOptions, handler: (event: AuthBlockingEvent) => BeforeSignInResponse | Promise<BeforeSignInResponse> | void | Promise<void>): BlockingFunction;
