"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOpts = exports.beforeOperation = exports.beforeUserSignedIn = exports.beforeUserCreated = exports.HttpsError = void 0;
const identity_1 = require("../../common/providers/identity");
Object.defineProperty(exports, "HttpsError", { enumerable: true, get: function () { return identity_1.HttpsError; } });
const options = require("../options");
function beforeUserCreated(optsOrHandler, handler) {
    return beforeOperation('beforeCreate', optsOrHandler, handler);
}
exports.beforeUserCreated = beforeUserCreated;
function beforeUserSignedIn(optsOrHandler, handler) {
    return beforeOperation('beforeSignIn', optsOrHandler, handler);
}
exports.beforeUserSignedIn = beforeUserSignedIn;
/** @internal */
function beforeOperation(eventType, optsOrHandler, handler) {
    if (!handler || typeof optsOrHandler === 'function') {
        handler = optsOrHandler;
        optsOrHandler = {};
    }
    const { opts, accessToken, idToken, refreshToken } = getOpts(optsOrHandler);
    // Create our own function that just calls the provided function so we know for sure that
    // handler takes one argument. This is something common/providers/identity depends on.
    const wrappedHandler = (event) => handler(event);
    const func = (0, identity_1.wrapHandler)(eventType, wrappedHandler);
    const legacyEventType = `providers/cloud.auth/eventTypes/user.${eventType}`;
    /** Endpoint */
    const baseOptsEndpoint = options.optionsToEndpoint(options.getGlobalOptions());
    const specificOptsEndpoint = options.optionsToEndpoint(opts);
    func.__endpoint = {
        platform: 'gcfv2',
        ...baseOptsEndpoint,
        ...specificOptsEndpoint,
        labels: {
            ...baseOptsEndpoint === null || baseOptsEndpoint === void 0 ? void 0 : baseOptsEndpoint.labels,
            ...specificOptsEndpoint === null || specificOptsEndpoint === void 0 ? void 0 : specificOptsEndpoint.labels,
        },
        blockingTrigger: {
            eventType: legacyEventType,
            options: {
                accessToken,
                idToken,
                refreshToken,
            },
        },
    };
    func.__requiredAPIs = [
        {
            api: 'identitytoolkit.googleapis.com',
            reason: 'Needed for auth blocking functions',
        },
    ];
    func.run = handler;
    return func;
}
exports.beforeOperation = beforeOperation;
/** @internal */
function getOpts(blockingOptions) {
    const accessToken = blockingOptions.accessToken || false;
    const idToken = blockingOptions.idToken || false;
    const refreshToken = blockingOptions.refreshToken || false;
    const opts = { ...blockingOptions };
    delete opts.accessToken;
    delete opts.idToken;
    delete opts.refreshToken;
    return {
        opts,
        accessToken,
        idToken,
        refreshToken,
    };
}
exports.getOpts = getOpts;
